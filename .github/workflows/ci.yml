name: UI Tests with WinAppDriver

on: push

env:
  DOTNET_MISSING: 'true'

jobs:
  ui-tests:
    runs-on: windows-latest

    steps:
    - name: Check if .NET is already installed
      shell: powershell
      run: |
        $dotnet = Get-Command dotnet -ErrorAction SilentlyContinue
        if ($null -eq $dotnet) {
          Write-Host ".NET not found. Installing..."
          echo "DOTNET_MISSING=true" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
          Write-Host ".NET is already installed. Version: $(dotnet --version)"
          echo "DOTNET_MISSING=false" | Out-File -FilePath $env:GITHUB_ENV -Append
        }

    - name: Setup .NET ${{ vars.DOTNET_VERSION }}
      if: env.DOTNET_MISSING == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration ${{ vars.BUILD_CONFIGURATION }}

    - name: Install WinAppDriver
      run: choco install winappdriver

    - name: Start WinAppDriver
      run: |
        Start-Process "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe"
        Start-Sleep -s 4
      
    - name: Test
      shell: powershell
      run: |
        $code_coverage = '${{ vars.ENABLE_CODE_COVERAGE }}'
        if ($code_coverage -eq 'true') {
          dotnet test --no-build --configuration ${{ vars.BUILD_CONFIGURATION }} --collect:"XPlat Code Coverage" --results-directory "./test-results"
        } else {
          dotnet test --no-build --configuration ${{ vars.BUILD_CONFIGURATION }}
        }
        
    - name: Get code coverage
      shell: powershell
      run: |
        $coverageMatch = Select-String -Path "./test-results/**/coverage.cobertura.xml" -Pattern 'line-rate="([0-9.]+)"' | Select-Object -First 1
        if ($null -ne $coverageMatch) {
            $coverageLine = $coverageMatch.Matches.Groups[1].Value
            $coveragePercent = [math]::Round([double]$coverageLine * 100, 2)
            echo "($coveragePercent%) covered"
        } else {
            Write-Error "Coverage line not found in the results file."
            exit 0
        }
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: test-results/
        retention-days: 1
